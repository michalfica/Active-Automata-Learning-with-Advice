<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="213" passed="213" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-04T17:32:13 CEST" name="Surefire suite" finished-at="2025-05-04T17:32:15 CEST" duration-ms="1832">
    <groups>
    </groups>
    <test started-at="2025-05-04T17:32:13 CEST" name="Surefire test" finished-at="2025-05-04T17:32:15 CEST" duration-ms="1832">
      <class name="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest">
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testNoQueriesReceived" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testCacheConsistency" duration-ms="84" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
        <test-method signature="testQueryWithNoContainedAlphabetSymbol()[pri:0, instance:de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest@704deff2]" started-at="2025-05-04T17:32:14 CEST" name="testQueryWithNoContainedAlphabetSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest.testDuplicatesInBatch" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQueryWithNoContainedAlphabetSymbol -->
      </class> <!-- de.learnlib.filter.cache.sul.StateLocalInputSULTreeCacheTest -->
      <class name="de.learnlib.filter.cache.sul.SULParallelCacheTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@27508c5d, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@1fd14d74]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@27508c5d, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@1fd14d74]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@27508c5d, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@1fd14d74]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@27508c5d, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@1fd14d74]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@4f704591, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@563e4951]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@4f704591, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@563e4951]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@4f704591, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@563e4951]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@4f704591, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@563e4951]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@6f6745d6, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@2609b277]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@6f6745d6, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@2609b277]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@6f6745d6, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@2609b277]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.sul.SULParallelCacheTest@6f6745d6, instance params:[de.learnlib.filter.cache.CacheConfig$SULConfig@2609b277]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- de.learnlib.filter.cache.sul.SULParallelCacheTest -->
      <class name="de.learnlib.filter.cache.dfa.DFAHashCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAHashCacheTest@2d9caaeb]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
      </class> <!-- de.learnlib.filter.cache.dfa.DFAHashCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest@6986852]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.mealy.MealyTreeMapperCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.MealyParallelCacheTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@1bab8268, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@3eb81efb]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@1bab8268, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@3eb81efb]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@1bab8268, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@3eb81efb]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@1bab8268, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@3eb81efb]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@2b9ed6da, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@7d3d101b]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@2b9ed6da, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@7d3d101b]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@2b9ed6da, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@7d3d101b]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@2b9ed6da, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@7d3d101b]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@658c5a19, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@5cdec700]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@658c5a19, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@5cdec700]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@658c5a19, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@5cdec700]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6c61a903, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@30c8681]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@658c5a19, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@5cdec700]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6c61a903, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@30c8681]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6c61a903, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@30c8681]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6e01f9b0, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@6cdba6dc]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6e01f9b0, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@6cdba6dc]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6c61a903, instance params:[de.learnlib.filter.cache.CacheConfig$MealyCollectionConfig@30c8681]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6e01f9b0, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@6cdba6dc]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@6e01f9b0, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@6cdba6dc]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@a307a8c, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@1ae8bcbc]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@a307a8c, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@1ae8bcbc]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@a307a8c, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@1ae8bcbc]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyParallelCacheTest@a307a8c, instance params:[de.learnlib.filter.cache.CacheConfig$MealySupplierConfig@1ae8bcbc]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- de.learnlib.filter.cache.mealy.MealyParallelCacheTest -->
      <class name="de.learnlib.filter.cache.sul.SULDAGCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.sul.SULDAGCacheTest@27e47833]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.sul.SULDAGCacheTest -->
      <class name="de.learnlib.filter.cache.moore.MooreParallelCacheTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@1787bc24, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@5c669da8]]" started-at="2025-05-04T17:32:13 CEST" name="setUp" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@1787bc24, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@5c669da8]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:13 CEST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@53b7f657, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@4032d386]]" started-at="2025-05-04T17:32:13 CEST" name="setUp" finished-at="2025-05-04T17:32:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@53b7f657, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@4032d386]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:13 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@544d57e, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@31920ade]]" started-at="2025-05-04T17:32:13 CEST" name="setUp" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@544d57e, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@31920ade]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:13 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@55c53a33, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@1d483de4]]" started-at="2025-05-04T17:32:13 CEST" name="setUp" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@55c53a33, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@1d483de4]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:13 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@1787bc24, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@5c669da8]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@1787bc24, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@5c669da8]]" started-at="2025-05-04T17:32:13 CEST" name="teardown" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@53b7f657, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@4032d386]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@53b7f657, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@4032d386]]" started-at="2025-05-04T17:32:13 CEST" name="teardown" finished-at="2025-05-04T17:32:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@544d57e, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@31920ade]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@544d57e, instance params:[de.learnlib.filter.cache.CacheConfig$MooreSupplierConfig@31920ade]]" started-at="2025-05-04T17:32:13 CEST" name="teardown" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@55c53a33, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@1d483de4]]" started-at="2025-05-04T17:32:13 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.moore.MooreParallelCacheTest@55c53a33, instance params:[de.learnlib.filter.cache.CacheConfig$MooreCollectionConfig@1d483de4]]" started-at="2025-05-04T17:32:13 CEST" name="teardown" finished-at="2025-05-04T17:32:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- de.learnlib.filter.cache.moore.MooreParallelCacheTest -->
      <class name="de.learnlib.filter.cache.sul.SLISULParallelCacheTest">
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@1e4d3ce5, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@2b175c00]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@1e4d3ce5, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@2b175c00]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@1e4d3ce5, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@2b175c00]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@4b5189ac, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@4066c471]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@1e4d3ce5, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@2b175c00]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@4b5189ac, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@4066c471]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@4b5189ac, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@4066c471]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.sul.SLISULParallelCacheTest@4b5189ac, instance params:[de.learnlib.filter.cache.CacheConfig$SLISULConfig@4066c471]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- de.learnlib.filter.cache.sul.SLISULParallelCacheTest -->
      <class name="de.learnlib.filter.cache.moore.MooreTreeCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="setup" finished-at="2025-05-04T17:32:13 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testPrefix" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testResuming" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="506" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeCacheTest@1863d2fe]" started-at="2025-05-04T17:32:13 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.moore.MooreTreeCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest">
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest@421e361]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.mealy.DynamicMealyTreeMapperCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.MealyDAGCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGCacheTest@59d4cd39]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.mealy.MealyDAGCacheTest -->
      <class name="de.learnlib.filter.cache.sul.SULTreeCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.sul.SULTreeCacheTest@3ddc6915]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.sul.SULTreeCacheTest -->
      <class name="de.learnlib.filter.cache.dfa.DFAParallelCacheTest">
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@29a5f4e7, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@27adc16e]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@29a5f4e7, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@27adc16e]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@29a5f4e7, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@27adc16e]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@29a5f4e7, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@27adc16e]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@4a3631f8, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@28d18df5]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@4a3631f8, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@28d18df5]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@4a3631f8, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@28d18df5]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@4a3631f8, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@28d18df5]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@52e7a6b2, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@3b74ac8]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@52e7a6b2, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@3b74ac8]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@52e7a6b2, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@3b74ac8]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@6b58b9e9, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@934b6cb]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@52e7a6b2, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@3b74ac8]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@6b58b9e9, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@934b6cb]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@6b58b9e9, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@934b6cb]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@6b58b9e9, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@934b6cb]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@79c97cb, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@b83a9be]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@79c97cb, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@b83a9be]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@79c97cb, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@b83a9be]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@f14a7d4, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@55cf0d14]]" started-at="2025-05-04T17:32:14 CEST" name="setUp" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@79c97cb, instance params:[de.learnlib.filter.cache.CacheConfig$DFACollectionConfig@b83a9be]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method signature="testConcurrentMembershipQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@f14a7d4, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@55cf0d14]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentMembershipQueries" finished-at="2025-05-04T17:32:14 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentMembershipQueries -->
        <test-method signature="testConcurrentEquivalenceQueries()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@f14a7d4, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@55cf0d14]]" started-at="2025-05-04T17:32:14 CEST" name="testConcurrentEquivalenceQueries" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractParallelCacheTest.testConcurrentMembershipQueries" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentEquivalenceQueries -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:de.learnlib.filter.cache.dfa.DFAParallelCacheTest@f14a7d4, instance params:[de.learnlib.filter.cache.CacheConfig$DFASupplierConfig@55cf0d14]]" started-at="2025-05-04T17:32:14 CEST" name="teardown" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- de.learnlib.filter.cache.dfa.DFAParallelCacheTest -->
      <class name="de.learnlib.filter.cache.dfa.DFADAGCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="71" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.dfa.DFADAGCacheTest@44a59da3]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.dfa.DFADAGCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:15 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="47" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest@6d7fc27]" started-at="2025-05-04T17:32:15 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:15 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
      </class> <!-- de.learnlib.filter.cache.mealy.AdaptiveQueryCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest@1acaf3d]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.mealy.MealyDAGMapperCacheTest -->
      <class name="de.learnlib.filter.cache.InterningMembershipOracleTest">
        <test-method signature="testInterning()[pri:0, instance:de.learnlib.filter.cache.InterningMembershipOracleTest@37911f88]" started-at="2025-05-04T17:32:13 CEST" name="testInterning" finished-at="2025-05-04T17:32:13 CEST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInterning -->
      </class> <!-- de.learnlib.filter.cache.InterningMembershipOracleTest -->
      <class name="de.learnlib.filter.cache.mealy.MealyTreeCacheTest">
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.mealy.MealyTreeCacheTest@1e81f160]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.mealy.MealyTreeCacheTest -->
      <class name="de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest">
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest@26df6e3a]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.moore.MooreDAGMapperCacheTest -->
      <class name="de.learnlib.filter.cache.dfa.DFATreeCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="73" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.dfa.DFATreeCacheTest@42a15bdc]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.dfa.DFATreeCacheTest -->
      <class name="de.learnlib.filter.cache.moore.MooreDAGCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="setup" finished-at="2025-05-04T17:32:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testPrefix" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:13 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.moore.MooreDAGCacheTest@5a37d3ed]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.moore.MooreDAGCacheTest -->
      <class name="de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest">
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:13 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="setup" finished-at="2025-05-04T17:32:13 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testPrefix" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testResuming" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest@797b0699]" started-at="2025-05-04T17:32:13 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:13 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.moore.MooreTreeMapperCacheTest -->
      <class name="de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="setup" finished-at="2025-05-04T17:32:14 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testNoQueriesReceived()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testNoQueriesReceived" finished-at="2025-05-04T17:32:14 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoQueriesReceived -->
        <test-method signature="testFirstQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testFirstQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testNoQueriesReceived" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstQuery -->
        <test-method signature="testTwoQueriesOneDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testTwoQueriesOneDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstDuplicate" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTwoQueriesOneDuplicate -->
        <test-method signature="testFirstDuplicate()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testFirstDuplicate" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testFirstQuery" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFirstDuplicate -->
        <test-method signature="testPrefix()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testPrefix" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testOneNewQuery" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrefix -->
        <test-method signature="testOneNewQuery()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testOneNewQuery" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testTwoQueriesOneDuplicate" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOneNewQuery -->
        <test-method signature="testCacheConsistency()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testCacheConsistency" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testPrefix" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheConsistency -->
        <test-method signature="testResuming()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testResuming" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testCacheConsistency" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResuming -->
        <test-method signature="testAddSymbol()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testAddSymbol" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testResuming" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddSymbol -->
        <test-method signature="testDuplicatesInBatch()[pri:0, instance:de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest@404bbcbd]" started-at="2025-05-04T17:32:14 CEST" name="testDuplicatesInBatch" finished-at="2025-05-04T17:32:14 CEST" depends-on-methods="de.learnlib.filter.cache.AbstractCacheTest.testAddSymbol" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicatesInBatch -->
      </class> <!-- de.learnlib.filter.cache.mealy.DynamicMealyTreeCacheTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
