<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="32" passed="32" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-04T15:12:09 CEST" name="Surefire suite" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1570">
    <groups>
    </groups>
    <test started-at="2025-05-04T15:12:09 CEST" name="Surefire test" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1570">
      <class name="de.learnlib.algorithm.rivestschapire.RivestSchapireMooreGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMooreGrowingAlphabetTest@543295b0]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMooreGrowingAlphabetTest@543295b0]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMooreGrowingAlphabetTest@543295b0]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="0" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.rivestschapire.RivestSchapireMooreGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.malerpnueli.MalerPnueliMealyResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMealyResumableLearnerTest@7ef82753]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMealyResumableLearnerTest@7ef82753]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.malerpnueli.MalerPnueliMealyResumableLearnerTest -->
      <class name="de.learnlib.algorithm.malerpnueli.MalerPnueliDFAResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliDFAResumableLearnerTest@3e27ba32]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliDFAResumableLearnerTest@3e27ba32]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.malerpnueli.MalerPnueliDFAResumableLearnerTest -->
      <class name="de.learnlib.algorithm.lstar.ExtensibleLStarMooreGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMooreGrowingAlphabetTest@17f62e33]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMooreGrowingAlphabetTest@17f62e33]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMooreGrowingAlphabetTest@17f62e33]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="0" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.lstar.ExtensibleLStarMooreGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.lstar.ExtensibleLStarDFAGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarDFAGrowingAlphabetTest@25ce9dc4]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarDFAGrowingAlphabetTest@25ce9dc4]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarDFAGrowingAlphabetTest@25ce9dc4]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.lstar.ExtensibleLStarDFAGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.lstar.ExtensibleLStarMealyGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMealyGrowingAlphabetTest@76b1e9b8]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMealyGrowingAlphabetTest@76b1e9b8]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMealyGrowingAlphabetTest@76b1e9b8]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="0" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.mealy.ExtensibleLStarMealy.addAlphabetSymbol(ExtensibleLStarMealy.java:112)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.lstar.ExtensibleLStarMealyGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.rivestschapire.RivestSchapireDFAGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireDFAGrowingAlphabetTest@793f29ff]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireDFAGrowingAlphabetTest@793f29ff]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireDFAGrowingAlphabetTest@793f29ff]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="0" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.rivestschapire.RivestSchapireDFAGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.rivestschapire.RivestSchapireDFAResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireDFAResumableLearnerTest@3e8c3cb]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireDFAResumableLearnerTest@3e8c3cb]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.rivestschapire.RivestSchapireDFAResumableLearnerTest -->
      <class name="de.learnlib.algorithm.rivestschapire.RivestSchapireMealyResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMealyResumableLearnerTest@54422e18]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMealyResumableLearnerTest@54422e18]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.rivestschapire.RivestSchapireMealyResumableLearnerTest -->
      <class name="de.learnlib.algorithm.malerpnueli.MalerPnueliDFAGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliDFAGrowingAlphabetTest@202b0582]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliDFAGrowingAlphabetTest@202b0582]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliDFAGrowingAlphabetTest@202b0582]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="0" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.malerpnueli.MalerPnueliDFAGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.malerpnueli.MalerPnueliMooreResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMooreResumableLearnerTest@117159c0]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMooreResumableLearnerTest@117159c0]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.malerpnueli.MalerPnueliMooreResumableLearnerTest -->
      <class name="de.learnlib.algorithm.lstar.ClassicLStarMealyGrowingAlphabetTest">
        <test-method signature="testClassicLStar()[pri:0, instance:de.learnlib.algorithm.lstar.ClassicLStarMealyGrowingAlphabetTest@248e319b]" started-at="2025-05-04T15:12:10 CEST" name="testClassicLStar" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <exception class="java.lang.UnsupportedOperationException">
            <message>
              <![CDATA[This implementation does not correct support adding new alphabet symbols. Use the ExtensibleLStarMealy implementation with the classic counterexample handler instead.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.UnsupportedOperationException: This implementation does not correct support adding new alphabet symbols. Use the ExtensibleLStarMealy implementation with the classic counterexample handler instead.
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.mealy.ClassicLStarMealy.addAlphabetSymbol(ClassicLStarMealy.java:130)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.ClassicLStarMealyGrowingAlphabetTest.testClassicLStar(ClassicLStarMealyGrowingAlphabetTest.java:92)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.UnsupportedOperationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClassicLStar -->
        <test-method signature="testConsistencyCheck()[pri:0, instance:de.learnlib.algorithm.lstar.ClassicLStarMealyGrowingAlphabetTest@248e319b]" started-at="2025-05-04T15:12:10 CEST" name="testConsistencyCheck" finished-at="2025-05-04T15:12:10 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConsistencyCheck -->
      </class> <!-- de.learnlib.algorithm.lstar.ClassicLStarMealyGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.lstar.ExtensibleLStarDFAResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarDFAResumableLearnerTest@173ed316]" started-at="2025-05-04T15:12:09 CEST" name="setup" finished-at="2025-05-04T15:12:09 CEST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarDFAResumableLearnerTest@173ed316]" started-at="2025-05-04T15:12:09 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="892" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.lstar.ExtensibleLStarDFAResumableLearnerTest -->
      <class name="de.learnlib.algorithm.malerpnueli.MalerPnueliMooreGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMooreGrowingAlphabetTest@235ecd9f]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMooreGrowingAlphabetTest@235ecd9f]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMooreGrowingAlphabetTest@235ecd9f]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.malerpnueli.MalerPnueliMooreGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.lstar.LStarDFATest">
        <test-method signature="testLStar()[pri:0, instance:de.learnlib.algorithm.lstar.LStarDFATest@6fdbe764]" started-at="2025-05-04T15:12:09 CEST" name="testLStar" finished-at="2025-05-04T15:12:09 CEST" duration-ms="343" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLStar -->
      </class> <!-- de.learnlib.algorithm.lstar.LStarDFATest -->
      <class name="de.learnlib.algorithm.rivestschapire.RivestSchapireMealyGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMealyGrowingAlphabetTest@563f38c4]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMealyGrowingAlphabetTest@563f38c4]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMealyGrowingAlphabetTest@563f38c4]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="0" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.mealy.ExtensibleLStarMealy.addAlphabetSymbol(ExtensibleLStarMealy.java:112)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.rivestschapire.RivestSchapireMealyGrowingAlphabetTest -->
      <class name="de.learnlib.algorithm.rivestschapire.RivestSchapireMooreResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMooreResumableLearnerTest@5d0bf09b]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.rivestschapire.RivestSchapireMooreResumableLearnerTest@5d0bf09b]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.rivestschapire.RivestSchapireMooreResumableLearnerTest -->
      <class name="de.learnlib.algorithm.lstar.ExtensibleLStarMealyResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMealyResumableLearnerTest@74ea2410]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMealyResumableLearnerTest@74ea2410]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="52" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.lstar.ExtensibleLStarMealyResumableLearnerTest -->
      <class name="de.learnlib.algorithm.lstar.ExtensibleLStarMooreResumableLearnerTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMooreResumableLearnerTest@2af004b]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testSuspendAndResumeLearner()[pri:0, instance:de.learnlib.algorithm.lstar.ExtensibleLStarMooreResumableLearnerTest@2af004b]" started-at="2025-05-04T15:12:10 CEST" name="testSuspendAndResumeLearner" finished-at="2025-05-04T15:12:10 CEST" duration-ms="40" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSuspendAndResumeLearner -->
      </class> <!-- de.learnlib.algorithm.lstar.ExtensibleLStarMooreResumableLearnerTest -->
      <class name="de.learnlib.algorithm.lstar.LStarMealyTest">
        <test-method signature="testClassicLStarMealy()[pri:0, instance:de.learnlib.algorithm.lstar.LStarMealyTest@27406a17]" started-at="2025-05-04T15:12:10 CEST" name="testClassicLStarMealy" finished-at="2025-05-04T15:12:10 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClassicLStarMealy -->
        <test-method signature="testOptimizedLStarMealy()[pri:0, instance:de.learnlib.algorithm.lstar.LStarMealyTest@27406a17]" started-at="2025-05-04T15:12:10 CEST" name="testOptimizedLStarMealy" finished-at="2025-05-04T15:12:10 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptimizedLStarMealy -->
      </class> <!-- de.learnlib.algorithm.lstar.LStarMealyTest -->
      <class name="de.learnlib.algorithm.malerpnueli.MalerPnueliMealyGrowingAlphabetTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMealyGrowingAlphabetTest@3b0fe47a]" started-at="2025-05-04T15:12:10 CEST" name="setup" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testGrowingAlphabet()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMealyGrowingAlphabetTest@3b0fe47a]" started-at="2025-05-04T15:12:10 CEST" name="testGrowingAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGrowingAlphabet -->
        <test-method signature="testInitialAlphabet()[pri:0, instance:de.learnlib.algorithm.malerpnueli.MalerPnueliMealyGrowingAlphabetTest@3b0fe47a]" started-at="2025-05-04T15:12:10 CEST" name="testInitialAlphabet" finished-at="2025-05-04T15:12:10 CEST" duration-ms="1" status="PASS">
          <exception class="net.automatalib.exception.GrowingAlphabetNotSupportedException">
            <message>
              <![CDATA[The alphabet '[0, 1, 2, 3, 4]' does not support growing]]>
            </message>
            <full-stacktrace>
              <![CDATA[net.automatalib.exception.GrowingAlphabetNotSupportedException: The alphabet '[0, 1, 2, 3, 4]' does not support growing
at net.automatalib.api@0.12.0/net.automatalib.alphabet.Alphabet.asGrowingAlphabetOrThrowException(Alphabet.java:131)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractLStar.addAlphabetSymbol(AbstractLStar.java:231)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.AbstractAutomatonLStar.addAlphabetSymbol(AbstractAutomatonLStar.java:179)
at de.learnlib.algorithm.lstar@0.19.0-SNAPSHOT/de.learnlib.algorithm.lstar.mealy.ExtensibleLStarMealy.addAlphabetSymbol(ExtensibleLStarMealy.java:112)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testAlphabet(AbstractGrowingAlphabetTest.java:103)
at de.learnlib.testsupport.AbstractGrowingAlphabetTest.testInitialAlphabet(AbstractGrowingAlphabetTest.java:84)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:569)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:155)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:169)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:88)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:137)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- net.automatalib.exception.GrowingAlphabetNotSupportedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInitialAlphabet -->
      </class> <!-- de.learnlib.algorithm.malerpnueli.MalerPnueliMealyGrowingAlphabetTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
