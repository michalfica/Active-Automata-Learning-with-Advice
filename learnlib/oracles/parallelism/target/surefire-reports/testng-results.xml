<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="181" passed="181" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-04T15:12:21 CEST" name="Surefire suite" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1832">
    <groups>
    </groups>
    <test started-at="2025-05-04T15:12:21 CEST" name="Surefire test" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1832">
      <class name="de.learnlib.oracle.parallelism.DynamicParallelOracleTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$NullOracle.processQueries(AbstractDynamicParallelOracleTest.java:124)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$NullOracle.processQueries(AbstractDynamicParallelOracleTest.java:124)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testCustomExecutorTooManyThreads()[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testCustomExecutorTooManyThreads" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[The executor service tried to spawn more threads than there are oracles available (3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: The executor service tried to spawn more threads than there are oracles available (3)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicBatchProcessorBuilder$StaticOracleProvider.get(AbstractDynamicBatchProcessorBuilder.java:192)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicBatchProcessorBuilder$StaticOracleProvider.get(AbstractDynamicBatchProcessorBuilder.java:164)
at java.base/java.lang.ThreadLocal$SuppliedThreadLocal.initialValue(ThreadLocal.java:305)
at java.base/java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:195)
at java.base/java.lang.ThreadLocal.get(ThreadLocal.java:172)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.DynamicQueriesJob.getOracle(DynamicQueriesJob.java:43)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:40)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCustomExecutorTooManyThreads -->
        <test-method signature="testThreadCreation(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testThreadCreation" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadCreation -->
        <test-method signature="testThreadCreation(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testThreadCreation" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadCreation -->
        <test-method signature="testThreadScheduling(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testThreadScheduling" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadScheduling -->
        <test-method signature="testThreadScheduling(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleTest@33990a0c]" started-at="2025-05-04T15:12:22 CEST" name="testThreadScheduling" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadScheduling -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelOracleTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest@4de4b452]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelOmegaSupplierTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelSLISULTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1217" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="77" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="24" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="21" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSLISULTest@24fcf36f]" started-at="2025-05-04T15:12:23 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelSLISULTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOmegaOracleTest.java:154)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$NullOracle.processQueries(AbstractDynamicParallelOmegaOracleTest.java:127)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.OmegaMembershipOracle.processBatch(OmegaMembershipOracle.java:48)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOmegaOracleTest.java:154)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$NullOracle.processQueries(AbstractDynamicParallelOmegaOracleTest.java:127)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.OmegaMembershipOracle.processBatch(OmegaMembershipOracle.java:48)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testSingleMethods()[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testSingleMethods" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleMethods -->
        <test-method signature="testThreadCreation(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testThreadCreation" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadCreation -->
        <test-method signature="testThreadCreation(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testThreadCreation" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadCreation -->
        <test-method signature="testThreadScheduling(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testThreadScheduling" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadScheduling -->
        <test-method signature="testThreadScheduling(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest@446293d]" started-at="2025-05-04T15:12:22 CEST" name="testThreadScheduling" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadScheduling -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelOmegaOracleTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest@3514a4c0]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest@3514a4c0]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest@3514a4c0]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOmegaOracleTest.java:154)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$NullOracle.processQueries(AbstractDynamicParallelOmegaOracleTest.java:127)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.OmegaMembershipOracle.processBatch(OmegaMembershipOracle.java:48)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest@3514a4c0]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOmegaOracleTest.java:154)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$NullOracle.processQueries(AbstractDynamicParallelOmegaOracleTest.java:127)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.OmegaMembershipOracle.processBatch(OmegaMembershipOracle.java:48)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest@3514a4c0]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest@3514a4c0]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelOmegaSupplierTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelOracleTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testCustomExecutorLessThreadsAvailable()[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleTest@3fb1549b]" started-at="2025-05-04T15:12:23 CEST" name="testCustomExecutorLessThreadsAvailable" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCustomExecutorLessThreadsAvailable -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelOracleTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelOracleBuilderTest">
        <test-method signature="testEmptyInputs()[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOracleBuilderTest@6babf3bf]" started-at="2025-05-04T15:12:22 CEST" name="testEmptyInputs" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyInputs -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelOracleBuilderTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelOracleBuilderTest">
        <test-method signature="testEmptyInputs()[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelOracleBuilderTest@15aab8c6]" started-at="2025-05-04T15:12:22 CEST" name="testEmptyInputs" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyInputs -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelOracleBuilderTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was answered more often than it should have been]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was answered more often than it should have been
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$AnswerOnceQuery.processOutput(AbstractDynamicParallelAdaptiveOracleTest.java:135)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$NullOracle.processQueries(AbstractDynamicParallelAdaptiveOracleTest.java:98)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.AdaptiveMembershipOracle.processBatch(AdaptiveMembershipOracle.java:64)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was answered more often than it should have been]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was answered more often than it should have been
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$AnswerOnceQuery.processOutput(AbstractDynamicParallelAdaptiveOracleTest.java:135)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$NullOracle.processQueries(AbstractDynamicParallelAdaptiveOracleTest.java:98)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.AdaptiveMembershipOracle.processBatch(AdaptiveMembershipOracle.java:64)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testThreadCreation(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testThreadCreation" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadCreation -->
        <test-method signature="testThreadCreation(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testThreadCreation" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadCreation -->
        <test-method signature="testThreadScheduling(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testThreadScheduling" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadScheduling -->
        <test-method signature="testThreadScheduling(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest@37654521]" started-at="2025-05-04T15:12:22 CEST" name="testThreadScheduling" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThreadScheduling -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelAdaptiveOracleTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelObservableSULTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelObservableSULTest@50b5ac82]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelObservableSULTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest@69997e9d]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelAdaptiveOracleTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelSULTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSULTest@29d89d5d]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSULTest@29d89d5d]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSULTest@29d89d5d]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.membership@0.19.0-SNAPSHOT/de.learnlib.oracle.membership.SULOracle.processQueries(SULOracle.java:43)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSULTest@29d89d5d]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.membership@0.19.0-SNAPSHOT/de.learnlib.oracle.membership.SULOracle.processQueries(SULOracle.java:43)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSULTest@29d89d5d]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSULTest@29d89d5d]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelSULTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelSULTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSULTest@ea6147e]" started-at="2025-05-04T15:12:23 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelSULTest -->
      <class name="de.learnlib.oracle.parallelism.SettingsTest">
        <test-method signature="testDefaults()[pri:0, instance:de.learnlib.oracle.parallelism.SettingsTest@793be5ca]" started-at="2025-05-04T15:12:22 CEST" name="testDefaults" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaults -->
      </class> <!-- de.learnlib.oracle.parallelism.SettingsTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testSingleMethods()[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest@3059cbc]" started-at="2025-05-04T15:12:22 CEST" name="testSingleMethods" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleMethods -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelOmegaOracleTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelSupplierTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSupplierTest@2df9b86]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSupplierTest@2df9b86]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSupplierTest@2df9b86]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$NullOracle.processQueries(AbstractDynamicParallelOracleTest.java:124)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSupplierTest@2df9b86]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$NullOracle.processQueries(AbstractDynamicParallelOracleTest.java:124)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSupplierTest@2df9b86]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSupplierTest@2df9b86]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelSupplierTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest@10feca44]" started-at="2025-05-04T15:12:23 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest@10feca44]" started-at="2025-05-04T15:12:23 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest@10feca44]" started-at="2025-05-04T15:12:23 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOmegaOracleTest.java:154)
at de.learnlib.oracle.membership@0.19.0-SNAPSHOT/de.learnlib.oracle.membership.AbstractSULOmegaOracle.processQueries(AbstractSULOmegaOracle.java:73)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.OmegaMembershipOracle.processBatch(OmegaMembershipOracle.java:48)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest@10feca44]" started-at="2025-05-04T15:12:23 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOmegaOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOmegaOracleTest.java:154)
at de.learnlib.oracle.membership@0.19.0-SNAPSHOT/de.learnlib.oracle.membership.AbstractSULOmegaOracle.processQueries(AbstractSULOmegaOracle.java:73)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.OmegaMembershipOracle.processBatch(OmegaMembershipOracle.java:48)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest@10feca44]" started-at="2025-05-04T15:12:23 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest@10feca44]" started-at="2025-05-04T15:12:23 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelObservableSULTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest@101952da]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest@101952da]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest@101952da]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was answered more often than it should have been]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was answered more often than it should have been
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$AnswerOnceQuery.processOutput(AbstractDynamicParallelAdaptiveOracleTest.java:135)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$NullOracle.processQueries(AbstractDynamicParallelAdaptiveOracleTest.java:98)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.AdaptiveMembershipOracle.processBatch(AdaptiveMembershipOracle.java:64)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest@101952da]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was answered more often than it should have been]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was answered more often than it should have been
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$AnswerOnceQuery.processOutput(AbstractDynamicParallelAdaptiveOracleTest.java:135)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelAdaptiveOracleTest$NullOracle.processQueries(AbstractDynamicParallelAdaptiveOracleTest.java:98)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.AdaptiveMembershipOracle.processBatch(AdaptiveMembershipOracle.java:64)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest@101952da]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest@101952da]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelAdaptiveSupplierTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelSupplierTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelSupplierTest@212b5695]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelSupplierTest -->
      <class name="de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest">
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testFullLoad(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testFullLoad" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFullLoad -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanMin -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanSixBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanSixBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanSixBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testLessThanTwoBatches(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testLessThanTwoBatches" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLessThanTwoBatches -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
        <test-method signature="testMin(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testMin" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMin -->
        <test-method signature="testZeroQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest@7ea9e1e2]" started-at="2025-05-04T15:12:22 CEST" name="testZeroQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZeroQueries -->
      </class> <!-- de.learnlib.oracle.parallelism.StaticParallelAdaptiveSupplierTest -->
      <class name="de.learnlib.oracle.parallelism.DynamicParallelSLISULTest">
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSLISULTest@22e357dc]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="26" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDistinctQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSLISULTest@22e357dc]" started-at="2025-05-04T15:12:22 CEST" name="testDistinctQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSLISULTest@22e357dc]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.membership@0.19.0-SNAPSHOT/de.learnlib.oracle.membership.StateLocalInputSULOracle.processQueries(StateLocalInputSULOracle.java:46)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testDuplicateQueries(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSLISULTest@22e357dc]" started-at="2025-05-04T15:12:22 CEST" name="testDuplicateQueries" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[Query was already answered]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: Query was already answered
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractDynamicParallelOracleTest$AnswerOnceQuery.answer(AbstractDynamicParallelOracleTest.java:137)
at de.learnlib.oracle.membership@0.19.0-SNAPSHOT/de.learnlib.oracle.membership.StateLocalInputSULOracle.processQueries(StateLocalInputSULOracle.java:46)
at de.learnlib.api@0.19.0-SNAPSHOT/de.learnlib.oracle.MembershipOracle.processBatch(MembershipOracle.java:84)
at de.learnlib.oracle.parallelism@0.19.0-SNAPSHOT/de.learnlib.oracle.parallelism.AbstractQueriesJob.run(AbstractQueriesJob.java:42)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateQueries -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSLISULTest@22e357dc]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[CACHED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method signature="testEmpty(de.learnlib.oracle.ThreadPool$PoolPolicy)[pri:0, instance:de.learnlib.oracle.parallelism.DynamicParallelSLISULTest@22e357dc]" started-at="2025-05-04T15:12:22 CEST" name="testEmpty" data-provider="policies" finished-at="2025-05-04T15:12:22 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.learnlib.oracle.parallelism.DynamicParallelSLISULTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
